import { type IAgentRuntime, Service, elizaLogger } from '@elizaos/core';

/**
 * Interface for OpenAI image generation API response
 */
interface OpenAIImageResponse {
  created: number;
  data: Array<{
    url?: string;
    revised_prompt?: string;
  }>;
}

/**
 * Service for generating images using OpenAI's gpt-image-1 model
 * See: https://platform.openai.com/docs/guides/images
 */
export class ImageGenerationService extends Service {
  static serviceType = 'image_generation';
  capabilityDescription = 'Generates images using OpenAI gpt-image-1';

  constructor(runtime: IAgentRuntime) {
    super(runtime);
  }

  async stop(): Promise<void> {
    // Nothing to stop
  }

  /**
   * Generates an image based on a text prompt using OpenAI's gpt-image-1 model
   * @param params Parameters for image generation
   * @returns Generated image URL or error message
   */
  async generateImage(params: { runtime: IAgentRuntime; prompt: string }): Promise<string> {
    const { runtime, prompt } = params;

    try {
      // Get the OpenAI API key
      const apiKey = runtime.getSetting('OPENAI_API_KEY');
      if (!apiKey) {
        throw new Error('OPENAI_API_KEY is not set');
      }

      // Call OpenAI API to generate image
      // Using gpt-image-1 model - OpenAI's latest model for image generation
      const response = await fetch('https://api.openai.com/v1/images/generations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-image-1', // Specific model as required
          prompt,
          n: 1,
          size: '1024x1024', // Default size for gpt-image-1
          response_format: 'url',
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        elizaLogger.error('OpenAI API error:', errorData);
        throw new Error(`OpenAI API error: ${response.statusText}`);
      }

      const data = (await response.json()) as OpenAIImageResponse;

      if (!data.data || data.data.length === 0 || !data.data[0].url) {
        throw new Error('No image was generated by OpenAI');
      }

      elizaLogger.log('Image URL received from OpenAI');

      // Return the image URL
      return data.data[0].url;
    } catch (error) {
      elizaLogger.error('Failed to generate image with OpenAI:', error);
      return `Failed to generate image: ${error instanceof Error ? error.message : String(error)}`;
    }
  }
}

export default ImageGenerationService;
