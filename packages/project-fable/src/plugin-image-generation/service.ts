import { elizaLogger } from '@elizaos/core';

/**
 * Interface for OpenAI image generation API response
 */
interface OpenAIImageResponse {
  created: number;
  data: Array<{
    url?: string;
    revised_prompt?: string;
  }>;
}

/**
 * Creates a service for generating images using OpenAI's gpt-image-1 model
 * See: https://platform.openai.com/docs/guides/images
 */
export const createImageGenerationService = (apiKey: string) => ({
  generateImage: async (prompt: string): Promise<string> => {
    try {
      elizaLogger.log('Generating image with prompt:', prompt);

      const response = await fetch('https://api.openai.com/v1/images/generations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-image-1',
          prompt,
          n: 1,
          size: '1024x1024',
          response_format: 'url',
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        elizaLogger.error('OpenAI API error:', errorData);
        throw new Error(`OpenAI API error: ${response.statusText}`);
      }

      const data = (await response.json()) as OpenAIImageResponse;

      if (!data.data?.[0]?.url) {
        throw new Error('No image was generated by OpenAI');
      }

      elizaLogger.log('Image URL received from OpenAI');
      return data.data[0].url;
    } catch (error) {
      elizaLogger.error('Failed to generate image with OpenAI:', error);
      throw error;
    }
  },
});

export default createImageGenerationService;
