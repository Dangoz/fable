import { type IAgentRuntime, Service, elizaLogger } from '@elizaos/core';

/**
 * Interface for OpenAI image generation API response
 */
interface OpenAIImageResponse {
  created: number;
  data: Array<{
    url?: string;
    b64_json?: string;
    revised_prompt?: string;
  }>;
}

/**
 * Service for generating images using OpenAI's GPT-Image-1/DALL-E models
 */
export class ImageGenerationService extends Service {
  static serviceType = 'image_generation';
  capabilityDescription = 'Generates images using OpenAI GPT-Image-1/DALL-E';

  constructor(runtime: IAgentRuntime) {
    super(runtime);
  }

  async stop(): Promise<void> {
    // Nothing to stop
  }

  /**
   * Generates an image based on a text prompt
   * @param params Parameters for image generation
   * @returns Generated image prompt or URL
   */
  async generateImage(params: {
    runtime: IAgentRuntime;
    context: string;
    modelClass: string;
    customSystemPrompt?: string;
  }): Promise<string> {
    const { runtime, context, modelClass, customSystemPrompt } = params;

    // Generate an optimized prompt using a text model
    const prompt = await runtime.useModel(modelClass, {
      runtime,
      prompt: context,
      ...(customSystemPrompt ? { systemPrompt: customSystemPrompt } : {}),
    });

    elizaLogger.log('Optimized image prompt:', prompt);

    try {
      // Get the OpenAI API key
      const apiKey = runtime.getSetting('OPENAI_API_KEY');
      if (!apiKey) {
        throw new Error('OPENAI_API_KEY is not set');
      }

      // Get image settings from character config or use defaults
      const settings = runtime.character?.settings?.imageSettings || {};
      const model = settings.model || 'dall-e-3';
      const quality = settings.quality || 'standard';
      const size = settings.size || '1024x1024';
      const style = settings.style || 'vivid';

      // Call OpenAI API to generate image
      const response = await fetch('https://api.openai.com/v1/images/generations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model,
          prompt,
          n: 1,
          quality,
          size,
          style,
          response_format: 'url',
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        elizaLogger.error('OpenAI API error:', errorData);
        throw new Error(`OpenAI API error: ${response.statusText}`);
      }

      const data = (await response.json()) as OpenAIImageResponse;

      if (!data.data || data.data.length === 0 || !data.data[0].url) {
        throw new Error('No image was generated by OpenAI');
      }

      elizaLogger.log('Image URL received from OpenAI');

      // Return the image URL
      return data.data[0].url;
    } catch (error) {
      elizaLogger.error('Failed to generate image with OpenAI:', error);
      // If generation fails, return the prompt for fallback handling
      return `Failed to generate image: ${prompt}`;
    }
  }
}

export default ImageGenerationService;
